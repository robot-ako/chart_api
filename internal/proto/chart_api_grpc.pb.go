// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: chart_api.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ChartAPI_GetAlgos_FullMethodName         = "/chart_api.ChartAPI/GetAlgos"
	ChartAPI_GetStreamsByAlgo_FullMethodName = "/chart_api.ChartAPI/GetStreamsByAlgo"
	ChartAPI_GetData_FullMethodName          = "/chart_api.ChartAPI/GetData"
	ChartAPI_GetLogs_FullMethodName          = "/chart_api.ChartAPI/GetLogs"
)

// ChartAPIClient is the client API for ChartAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChartAPIClient interface {
	GetAlgos(ctx context.Context, in *GetAlgosRequest, opts ...grpc.CallOption) (*GetAlgosResponse, error)
	GetStreamsByAlgo(ctx context.Context, in *GetStreamsByAlgoRequest, opts ...grpc.CallOption) (*GetStreamsByAlgoResponse, error)
	GetData(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (*GetDataResponse, error)
	GetLogs(ctx context.Context, in *GetLogsRequest, opts ...grpc.CallOption) (*GetLogsResponse, error)
}

type chartAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewChartAPIClient(cc grpc.ClientConnInterface) ChartAPIClient {
	return &chartAPIClient{cc}
}

func (c *chartAPIClient) GetAlgos(ctx context.Context, in *GetAlgosRequest, opts ...grpc.CallOption) (*GetAlgosResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAlgosResponse)
	err := c.cc.Invoke(ctx, ChartAPI_GetAlgos_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chartAPIClient) GetStreamsByAlgo(ctx context.Context, in *GetStreamsByAlgoRequest, opts ...grpc.CallOption) (*GetStreamsByAlgoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStreamsByAlgoResponse)
	err := c.cc.Invoke(ctx, ChartAPI_GetStreamsByAlgo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chartAPIClient) GetData(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (*GetDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDataResponse)
	err := c.cc.Invoke(ctx, ChartAPI_GetData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chartAPIClient) GetLogs(ctx context.Context, in *GetLogsRequest, opts ...grpc.CallOption) (*GetLogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLogsResponse)
	err := c.cc.Invoke(ctx, ChartAPI_GetLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChartAPIServer is the server API for ChartAPI service.
// All implementations must embed UnimplementedChartAPIServer
// for forward compatibility.
type ChartAPIServer interface {
	GetAlgos(context.Context, *GetAlgosRequest) (*GetAlgosResponse, error)
	GetStreamsByAlgo(context.Context, *GetStreamsByAlgoRequest) (*GetStreamsByAlgoResponse, error)
	GetData(context.Context, *GetDataRequest) (*GetDataResponse, error)
	GetLogs(context.Context, *GetLogsRequest) (*GetLogsResponse, error)
	mustEmbedUnimplementedChartAPIServer()
}

// UnimplementedChartAPIServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChartAPIServer struct{}

func (UnimplementedChartAPIServer) GetAlgos(context.Context, *GetAlgosRequest) (*GetAlgosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlgos not implemented")
}
func (UnimplementedChartAPIServer) GetStreamsByAlgo(context.Context, *GetStreamsByAlgoRequest) (*GetStreamsByAlgoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreamsByAlgo not implemented")
}
func (UnimplementedChartAPIServer) GetData(context.Context, *GetDataRequest) (*GetDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetData not implemented")
}
func (UnimplementedChartAPIServer) GetLogs(context.Context, *GetLogsRequest) (*GetLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogs not implemented")
}
func (UnimplementedChartAPIServer) mustEmbedUnimplementedChartAPIServer() {}
func (UnimplementedChartAPIServer) testEmbeddedByValue()                  {}

// UnsafeChartAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChartAPIServer will
// result in compilation errors.
type UnsafeChartAPIServer interface {
	mustEmbedUnimplementedChartAPIServer()
}

func RegisterChartAPIServer(s grpc.ServiceRegistrar, srv ChartAPIServer) {
	// If the following call pancis, it indicates UnimplementedChartAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChartAPI_ServiceDesc, srv)
}

func _ChartAPI_GetAlgos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAlgosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChartAPIServer).GetAlgos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChartAPI_GetAlgos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChartAPIServer).GetAlgos(ctx, req.(*GetAlgosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChartAPI_GetStreamsByAlgo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStreamsByAlgoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChartAPIServer).GetStreamsByAlgo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChartAPI_GetStreamsByAlgo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChartAPIServer).GetStreamsByAlgo(ctx, req.(*GetStreamsByAlgoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChartAPI_GetData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChartAPIServer).GetData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChartAPI_GetData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChartAPIServer).GetData(ctx, req.(*GetDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChartAPI_GetLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChartAPIServer).GetLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChartAPI_GetLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChartAPIServer).GetLogs(ctx, req.(*GetLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChartAPI_ServiceDesc is the grpc.ServiceDesc for ChartAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChartAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chart_api.ChartAPI",
	HandlerType: (*ChartAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAlgos",
			Handler:    _ChartAPI_GetAlgos_Handler,
		},
		{
			MethodName: "GetStreamsByAlgo",
			Handler:    _ChartAPI_GetStreamsByAlgo_Handler,
		},
		{
			MethodName: "GetData",
			Handler:    _ChartAPI_GetData_Handler,
		},
		{
			MethodName: "GetLogs",
			Handler:    _ChartAPI_GetLogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chart_api.proto",
}
