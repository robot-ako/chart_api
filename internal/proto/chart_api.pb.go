// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.29.1
// source: chart_api.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetAlgosRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAlgosRequest) Reset() {
	*x = GetAlgosRequest{}
	mi := &file_chart_api_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAlgosRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAlgosRequest) ProtoMessage() {}

func (x *GetAlgosRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chart_api_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAlgosRequest.ProtoReflect.Descriptor instead.
func (*GetAlgosRequest) Descriptor() ([]byte, []int) {
	return file_chart_api_proto_rawDescGZIP(), []int{0}
}

type GetAlgosResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Algos []string `protobuf:"bytes,1,rep,name=algos,proto3" json:"algos,omitempty"`
}

func (x *GetAlgosResponse) Reset() {
	*x = GetAlgosResponse{}
	mi := &file_chart_api_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAlgosResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAlgosResponse) ProtoMessage() {}

func (x *GetAlgosResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chart_api_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAlgosResponse.ProtoReflect.Descriptor instead.
func (*GetAlgosResponse) Descriptor() ([]byte, []int) {
	return file_chart_api_proto_rawDescGZIP(), []int{1}
}

func (x *GetAlgosResponse) GetAlgos() []string {
	if x != nil {
		return x.Algos
	}
	return nil
}

type GetStreamsByAlgoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Algo string `protobuf:"bytes,1,opt,name=algo,proto3" json:"algo,omitempty"`
}

func (x *GetStreamsByAlgoRequest) Reset() {
	*x = GetStreamsByAlgoRequest{}
	mi := &file_chart_api_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStreamsByAlgoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStreamsByAlgoRequest) ProtoMessage() {}

func (x *GetStreamsByAlgoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chart_api_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStreamsByAlgoRequest.ProtoReflect.Descriptor instead.
func (*GetStreamsByAlgoRequest) Descriptor() ([]byte, []int) {
	return file_chart_api_proto_rawDescGZIP(), []int{2}
}

func (x *GetStreamsByAlgoRequest) GetAlgo() string {
	if x != nil {
		return x.Algo
	}
	return ""
}

type IndicatorParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  string             `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Param map[string]float64 `protobuf:"bytes,2,rep,name=param,proto3" json:"param,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
}

func (x *IndicatorParam) Reset() {
	*x = IndicatorParam{}
	mi := &file_chart_api_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IndicatorParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndicatorParam) ProtoMessage() {}

func (x *IndicatorParam) ProtoReflect() protoreflect.Message {
	mi := &file_chart_api_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndicatorParam.ProtoReflect.Descriptor instead.
func (*IndicatorParam) Descriptor() ([]byte, []int) {
	return file_chart_api_proto_rawDescGZIP(), []int{3}
}

func (x *IndicatorParam) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *IndicatorParam) GetParam() map[string]float64 {
	if x != nil {
		return x.Param
	}
	return nil
}

type StreamData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	User           string            `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Coin           string            `protobuf:"bytes,3,opt,name=coin,proto3" json:"coin,omitempty"`
	CoinSecond     string            `protobuf:"bytes,4,opt,name=coin_second,json=coinSecond,proto3" json:"coin_second,omitempty"`
	Timeframe      string            `protobuf:"bytes,5,opt,name=timeframe,proto3" json:"timeframe,omitempty"`
	Algo           string            `protobuf:"bytes,6,opt,name=algo,proto3" json:"algo,omitempty"`
	PriceDecimal   int32             `protobuf:"varint,7,opt,name=price_decimal,json=priceDecimal,proto3" json:"price_decimal,omitempty"`
	SizeDecimal    int32             `protobuf:"varint,8,opt,name=size_decimal,json=sizeDecimal,proto3" json:"size_decimal,omitempty"`
	IndicatorParam []*IndicatorParam `protobuf:"bytes,9,rep,name=indicator_param,json=indicatorParam,proto3" json:"indicator_param,omitempty"`
}

func (x *StreamData) Reset() {
	*x = StreamData{}
	mi := &file_chart_api_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamData) ProtoMessage() {}

func (x *StreamData) ProtoReflect() protoreflect.Message {
	mi := &file_chart_api_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamData.ProtoReflect.Descriptor instead.
func (*StreamData) Descriptor() ([]byte, []int) {
	return file_chart_api_proto_rawDescGZIP(), []int{4}
}

func (x *StreamData) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StreamData) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *StreamData) GetCoin() string {
	if x != nil {
		return x.Coin
	}
	return ""
}

func (x *StreamData) GetCoinSecond() string {
	if x != nil {
		return x.CoinSecond
	}
	return ""
}

func (x *StreamData) GetTimeframe() string {
	if x != nil {
		return x.Timeframe
	}
	return ""
}

func (x *StreamData) GetAlgo() string {
	if x != nil {
		return x.Algo
	}
	return ""
}

func (x *StreamData) GetPriceDecimal() int32 {
	if x != nil {
		return x.PriceDecimal
	}
	return 0
}

func (x *StreamData) GetSizeDecimal() int32 {
	if x != nil {
		return x.SizeDecimal
	}
	return 0
}

func (x *StreamData) GetIndicatorParam() []*IndicatorParam {
	if x != nil {
		return x.IndicatorParam
	}
	return nil
}

type GetStreamsByAlgoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Streams []*StreamData `protobuf:"bytes,1,rep,name=streams,proto3" json:"streams,omitempty"`
}

func (x *GetStreamsByAlgoResponse) Reset() {
	*x = GetStreamsByAlgoResponse{}
	mi := &file_chart_api_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStreamsByAlgoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStreamsByAlgoResponse) ProtoMessage() {}

func (x *GetStreamsByAlgoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chart_api_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStreamsByAlgoResponse.ProtoReflect.Descriptor instead.
func (*GetStreamsByAlgoResponse) Descriptor() ([]byte, []int) {
	return file_chart_api_proto_rawDescGZIP(), []int{5}
}

func (x *GetStreamsByAlgoResponse) GetStreams() []*StreamData {
	if x != nil {
		return x.Streams
	}
	return nil
}

type GetDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	FromTimestamp int64 `protobuf:"varint,2,opt,name=from_timestamp,json=fromTimestamp,proto3" json:"from_timestamp,omitempty"`
	Limit         int32 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetDataRequest) Reset() {
	*x = GetDataRequest{}
	mi := &file_chart_api_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataRequest) ProtoMessage() {}

func (x *GetDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chart_api_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataRequest.ProtoReflect.Descriptor instead.
func (*GetDataRequest) Descriptor() ([]byte, []int) {
	return file_chart_api_proto_rawDescGZIP(), []int{6}
}

func (x *GetDataRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetDataRequest) GetFromTimestamp() int64 {
	if x != nil {
		return x.FromTimestamp
	}
	return 0
}

func (x *GetDataRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type DataPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Time       string       `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	Timestamp  string       `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Open       float64      `protobuf:"fixed64,4,opt,name=open,proto3" json:"open,omitempty"`
	High       float64      `protobuf:"fixed64,5,opt,name=high,proto3" json:"high,omitempty"`
	Low        float64      `protobuf:"fixed64,6,opt,name=low,proto3" json:"low,omitempty"`
	Close      float64      `protobuf:"fixed64,7,opt,name=close,proto3" json:"close,omitempty"`
	Volume     float64      `protobuf:"fixed64,8,opt,name=volume,proto3" json:"volume,omitempty"`
	Indicators []*Indicator `protobuf:"bytes,9,rep,name=indicators,proto3" json:"indicators,omitempty"`
}

func (x *DataPoint) Reset() {
	*x = DataPoint{}
	mi := &file_chart_api_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataPoint) ProtoMessage() {}

func (x *DataPoint) ProtoReflect() protoreflect.Message {
	mi := &file_chart_api_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataPoint.ProtoReflect.Descriptor instead.
func (*DataPoint) Descriptor() ([]byte, []int) {
	return file_chart_api_proto_rawDescGZIP(), []int{7}
}

func (x *DataPoint) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DataPoint) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *DataPoint) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *DataPoint) GetOpen() float64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *DataPoint) GetHigh() float64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *DataPoint) GetLow() float64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *DataPoint) GetClose() float64 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *DataPoint) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *DataPoint) GetIndicators() []*Indicator {
	if x != nil {
		return x.Indicators
	}
	return nil
}

type Indicator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   string             `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Name   string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Param  map[string]float64 `protobuf:"bytes,3,rep,name=param,proto3" json:"param,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	Volume []*Volume          `protobuf:"bytes,4,rep,name=volume,proto3" json:"volume,omitempty"`
}

func (x *Indicator) Reset() {
	*x = Indicator{}
	mi := &file_chart_api_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Indicator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Indicator) ProtoMessage() {}

func (x *Indicator) ProtoReflect() protoreflect.Message {
	mi := &file_chart_api_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Indicator.ProtoReflect.Descriptor instead.
func (*Indicator) Descriptor() ([]byte, []int) {
	return file_chart_api_proto_rawDescGZIP(), []int{8}
}

func (x *Indicator) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Indicator) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Indicator) GetParam() map[string]float64 {
	if x != nil {
		return x.Param
	}
	return nil
}

func (x *Indicator) GetVolume() []*Volume {
	if x != nil {
		return x.Volume
	}
	return nil
}

type Volume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Params map[string]float64 `protobuf:"bytes,1,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
}

func (x *Volume) Reset() {
	*x = Volume{}
	mi := &file_chart_api_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Volume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Volume) ProtoMessage() {}

func (x *Volume) ProtoReflect() protoreflect.Message {
	mi := &file_chart_api_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Volume.ProtoReflect.Descriptor instead.
func (*Volume) Descriptor() ([]byte, []int) {
	return file_chart_api_proto_rawDescGZIP(), []int{9}
}

func (x *Volume) GetParams() map[string]float64 {
	if x != nil {
		return x.Params
	}
	return nil
}

type GetDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*DataPoint `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetDataResponse) Reset() {
	*x = GetDataResponse{}
	mi := &file_chart_api_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataResponse) ProtoMessage() {}

func (x *GetDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chart_api_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataResponse.ProtoReflect.Descriptor instead.
func (*GetDataResponse) Descriptor() ([]byte, []int) {
	return file_chart_api_proto_rawDescGZIP(), []int{10}
}

func (x *GetDataResponse) GetData() []*DataPoint {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	FromTimestamp int64 `protobuf:"varint,2,opt,name=from_timestamp,json=fromTimestamp,proto3" json:"from_timestamp,omitempty"`
	OrdersOnly    bool  `protobuf:"varint,3,opt,name=orders_only,json=ordersOnly,proto3" json:"orders_only,omitempty"`
	Limit         int32 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetLogsRequest) Reset() {
	*x = GetLogsRequest{}
	mi := &file_chart_api_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLogsRequest) ProtoMessage() {}

func (x *GetLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chart_api_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLogsRequest.ProtoReflect.Descriptor instead.
func (*GetLogsRequest) Descriptor() ([]byte, []int) {
	return file_chart_api_proto_rawDescGZIP(), []int{11}
}

func (x *GetLogsRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetLogsRequest) GetFromTimestamp() int64 {
	if x != nil {
		return x.FromTimestamp
	}
	return 0
}

func (x *GetLogsRequest) GetOrdersOnly() bool {
	if x != nil {
		return x.OrdersOnly
	}
	return false
}

func (x *GetLogsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type LogEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time               string  `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	Timestamp          string  `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Algo               string  `protobuf:"bytes,6,opt,name=algo,proto3" json:"algo,omitempty"`
	Timeframe          string  `protobuf:"bytes,8,opt,name=timeframe,proto3" json:"timeframe,omitempty"`
	BlockId            int32   `protobuf:"varint,10,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	BlockName          string  `protobuf:"bytes,11,opt,name=block_name,json=blockName,proto3" json:"block_name,omitempty"`
	IndicatorParam     string  `protobuf:"bytes,12,opt,name=indicator_param,json=indicatorParam,proto3" json:"indicator_param,omitempty"`
	Vars               string  `protobuf:"bytes,13,opt,name=vars,proto3" json:"vars,omitempty"`
	Close              float64 `protobuf:"fixed64,14,opt,name=close,proto3" json:"close,omitempty"`
	Balance            float64 `protobuf:"fixed64,15,opt,name=balance,proto3" json:"balance,omitempty"`
	Equity             float64 `protobuf:"fixed64,16,opt,name=equity,proto3" json:"equity,omitempty"`
	Money              float64 `protobuf:"fixed64,17,opt,name=money,proto3" json:"money,omitempty"`
	Side               string  `protobuf:"bytes,18,opt,name=side,proto3" json:"side,omitempty"`
	OrderLeverageLong  float64 `protobuf:"fixed64,19,opt,name=order_leverage_long,json=orderLeverageLong,proto3" json:"order_leverage_long,omitempty"`
	LeverageLong       float64 `protobuf:"fixed64,20,opt,name=leverage_long,json=leverageLong,proto3" json:"leverage_long,omitempty"`
	OrderSizeLong      float64 `protobuf:"fixed64,21,opt,name=order_size_long,json=orderSizeLong,proto3" json:"order_size_long,omitempty"`
	OrderPriceLong     float64 `protobuf:"fixed64,22,opt,name=order_price_long,json=orderPriceLong,proto3" json:"order_price_long,omitempty"`
	OrderUsdLong       float64 `protobuf:"fixed64,23,opt,name=order_usd_long,json=orderUsdLong,proto3" json:"order_usd_long,omitempty"`
	OrderTypeLong      string  `protobuf:"bytes,24,opt,name=order_type_long,json=orderTypeLong,proto3" json:"order_type_long,omitempty"`
	PositionSizeLong   float64 `protobuf:"fixed64,25,opt,name=position_size_long,json=positionSizeLong,proto3" json:"position_size_long,omitempty"`
	PositionPriceLong  float64 `protobuf:"fixed64,26,opt,name=position_price_long,json=positionPriceLong,proto3" json:"position_price_long,omitempty"`
	PositionUsdLong    float64 `protobuf:"fixed64,27,opt,name=position_usd_long,json=positionUsdLong,proto3" json:"position_usd_long,omitempty"`
	PnlLong            float64 `protobuf:"fixed64,28,opt,name=pnl_long,json=pnlLong,proto3" json:"pnl_long,omitempty"`
	FeeLong            float64 `protobuf:"fixed64,29,opt,name=fee_long,json=feeLong,proto3" json:"fee_long,omitempty"`
	FundingLong        float64 `protobuf:"fixed64,30,opt,name=funding_long,json=fundingLong,proto3" json:"funding_long,omitempty"`
	RplLong            float64 `protobuf:"fixed64,31,opt,name=rpl_long,json=rplLong,proto3" json:"rpl_long,omitempty"`
	OrderLeverageShort float64 `protobuf:"fixed64,32,opt,name=order_leverage_short,json=orderLeverageShort,proto3" json:"order_leverage_short,omitempty"`
	LeverageShort      float64 `protobuf:"fixed64,33,opt,name=leverage_short,json=leverageShort,proto3" json:"leverage_short,omitempty"`
	OrderSizeShort     float64 `protobuf:"fixed64,34,opt,name=order_size_short,json=orderSizeShort,proto3" json:"order_size_short,omitempty"`
	OrderPriceShort    float64 `protobuf:"fixed64,35,opt,name=order_price_short,json=orderPriceShort,proto3" json:"order_price_short,omitempty"`
	OrderUsdShort      float64 `protobuf:"fixed64,36,opt,name=order_usd_short,json=orderUsdShort,proto3" json:"order_usd_short,omitempty"`
	OrderTypeShort     string  `protobuf:"bytes,37,opt,name=order_type_short,json=orderTypeShort,proto3" json:"order_type_short,omitempty"`
	PositionUsdShort   float64 `protobuf:"fixed64,38,opt,name=position_usd_short,json=positionUsdShort,proto3" json:"position_usd_short,omitempty"`
	PositionSizeShort  float64 `protobuf:"fixed64,39,opt,name=position_size_short,json=positionSizeShort,proto3" json:"position_size_short,omitempty"`
	PositionPriceShort float64 `protobuf:"fixed64,40,opt,name=position_price_short,json=positionPriceShort,proto3" json:"position_price_short,omitempty"`
	PnlShort           float64 `protobuf:"fixed64,41,opt,name=pnl_short,json=pnlShort,proto3" json:"pnl_short,omitempty"`
	FeeShort           float64 `protobuf:"fixed64,42,opt,name=fee_short,json=feeShort,proto3" json:"fee_short,omitempty"`
	FundingShort       float64 `protobuf:"fixed64,43,opt,name=funding_short,json=fundingShort,proto3" json:"funding_short,omitempty"`
	RplShort           float64 `protobuf:"fixed64,44,opt,name=rpl_short,json=rplShort,proto3" json:"rpl_short,omitempty"`
	User               string  `protobuf:"bytes,45,opt,name=user,proto3" json:"user,omitempty"`
	Mode               string  `protobuf:"bytes,46,opt,name=mode,proto3" json:"mode,omitempty"`
	ModeTime           string  `protobuf:"bytes,47,opt,name=mode_time,json=modeTime,proto3" json:"mode_time,omitempty"`
	Coin               string  `protobuf:"bytes,48,opt,name=coin,proto3" json:"coin,omitempty"`
	CoinSecond         string  `protobuf:"bytes,49,opt,name=coin_second,json=coinSecond,proto3" json:"coin_second,omitempty"`
}

func (x *LogEntry) Reset() {
	*x = LogEntry{}
	mi := &file_chart_api_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogEntry) ProtoMessage() {}

func (x *LogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_chart_api_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogEntry.ProtoReflect.Descriptor instead.
func (*LogEntry) Descriptor() ([]byte, []int) {
	return file_chart_api_proto_rawDescGZIP(), []int{12}
}

func (x *LogEntry) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *LogEntry) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *LogEntry) GetAlgo() string {
	if x != nil {
		return x.Algo
	}
	return ""
}

func (x *LogEntry) GetTimeframe() string {
	if x != nil {
		return x.Timeframe
	}
	return ""
}

func (x *LogEntry) GetBlockId() int32 {
	if x != nil {
		return x.BlockId
	}
	return 0
}

func (x *LogEntry) GetBlockName() string {
	if x != nil {
		return x.BlockName
	}
	return ""
}

func (x *LogEntry) GetIndicatorParam() string {
	if x != nil {
		return x.IndicatorParam
	}
	return ""
}

func (x *LogEntry) GetVars() string {
	if x != nil {
		return x.Vars
	}
	return ""
}

func (x *LogEntry) GetClose() float64 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *LogEntry) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *LogEntry) GetEquity() float64 {
	if x != nil {
		return x.Equity
	}
	return 0
}

func (x *LogEntry) GetMoney() float64 {
	if x != nil {
		return x.Money
	}
	return 0
}

func (x *LogEntry) GetSide() string {
	if x != nil {
		return x.Side
	}
	return ""
}

func (x *LogEntry) GetOrderLeverageLong() float64 {
	if x != nil {
		return x.OrderLeverageLong
	}
	return 0
}

func (x *LogEntry) GetLeverageLong() float64 {
	if x != nil {
		return x.LeverageLong
	}
	return 0
}

func (x *LogEntry) GetOrderSizeLong() float64 {
	if x != nil {
		return x.OrderSizeLong
	}
	return 0
}

func (x *LogEntry) GetOrderPriceLong() float64 {
	if x != nil {
		return x.OrderPriceLong
	}
	return 0
}

func (x *LogEntry) GetOrderUsdLong() float64 {
	if x != nil {
		return x.OrderUsdLong
	}
	return 0
}

func (x *LogEntry) GetOrderTypeLong() string {
	if x != nil {
		return x.OrderTypeLong
	}
	return ""
}

func (x *LogEntry) GetPositionSizeLong() float64 {
	if x != nil {
		return x.PositionSizeLong
	}
	return 0
}

func (x *LogEntry) GetPositionPriceLong() float64 {
	if x != nil {
		return x.PositionPriceLong
	}
	return 0
}

func (x *LogEntry) GetPositionUsdLong() float64 {
	if x != nil {
		return x.PositionUsdLong
	}
	return 0
}

func (x *LogEntry) GetPnlLong() float64 {
	if x != nil {
		return x.PnlLong
	}
	return 0
}

func (x *LogEntry) GetFeeLong() float64 {
	if x != nil {
		return x.FeeLong
	}
	return 0
}

func (x *LogEntry) GetFundingLong() float64 {
	if x != nil {
		return x.FundingLong
	}
	return 0
}

func (x *LogEntry) GetRplLong() float64 {
	if x != nil {
		return x.RplLong
	}
	return 0
}

func (x *LogEntry) GetOrderLeverageShort() float64 {
	if x != nil {
		return x.OrderLeverageShort
	}
	return 0
}

func (x *LogEntry) GetLeverageShort() float64 {
	if x != nil {
		return x.LeverageShort
	}
	return 0
}

func (x *LogEntry) GetOrderSizeShort() float64 {
	if x != nil {
		return x.OrderSizeShort
	}
	return 0
}

func (x *LogEntry) GetOrderPriceShort() float64 {
	if x != nil {
		return x.OrderPriceShort
	}
	return 0
}

func (x *LogEntry) GetOrderUsdShort() float64 {
	if x != nil {
		return x.OrderUsdShort
	}
	return 0
}

func (x *LogEntry) GetOrderTypeShort() string {
	if x != nil {
		return x.OrderTypeShort
	}
	return ""
}

func (x *LogEntry) GetPositionUsdShort() float64 {
	if x != nil {
		return x.PositionUsdShort
	}
	return 0
}

func (x *LogEntry) GetPositionSizeShort() float64 {
	if x != nil {
		return x.PositionSizeShort
	}
	return 0
}

func (x *LogEntry) GetPositionPriceShort() float64 {
	if x != nil {
		return x.PositionPriceShort
	}
	return 0
}

func (x *LogEntry) GetPnlShort() float64 {
	if x != nil {
		return x.PnlShort
	}
	return 0
}

func (x *LogEntry) GetFeeShort() float64 {
	if x != nil {
		return x.FeeShort
	}
	return 0
}

func (x *LogEntry) GetFundingShort() float64 {
	if x != nil {
		return x.FundingShort
	}
	return 0
}

func (x *LogEntry) GetRplShort() float64 {
	if x != nil {
		return x.RplShort
	}
	return 0
}

func (x *LogEntry) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *LogEntry) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *LogEntry) GetModeTime() string {
	if x != nil {
		return x.ModeTime
	}
	return ""
}

func (x *LogEntry) GetCoin() string {
	if x != nil {
		return x.Coin
	}
	return ""
}

func (x *LogEntry) GetCoinSecond() string {
	if x != nil {
		return x.CoinSecond
	}
	return ""
}

type GetLogsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Logs []*LogEntry `protobuf:"bytes,1,rep,name=logs,proto3" json:"logs,omitempty"`
}

func (x *GetLogsResponse) Reset() {
	*x = GetLogsResponse{}
	mi := &file_chart_api_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLogsResponse) ProtoMessage() {}

func (x *GetLogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chart_api_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLogsResponse.ProtoReflect.Descriptor instead.
func (*GetLogsResponse) Descriptor() ([]byte, []int) {
	return file_chart_api_proto_rawDescGZIP(), []int{13}
}

func (x *GetLogsResponse) GetLogs() []*LogEntry {
	if x != nil {
		return x.Logs
	}
	return nil
}

var File_chart_api_proto protoreflect.FileDescriptor

var file_chart_api_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x63, 0x68, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x22, 0x11, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x67, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x28, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x67, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x67, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x67, 0x6f, 0x73, 0x22, 0x2d, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x42, 0x79, 0x41, 0x6c, 0x67, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x6c, 0x67, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x61, 0x6c, 0x67, 0x6f, 0x22, 0x9a, 0x01, 0x0a, 0x0e, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x3a, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x63, 0x68, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x38, 0x0a, 0x0a, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa3, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6f, 0x69, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61,
	0x6c, 0x67, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x6c, 0x67, 0x6f, 0x12,
	0x23, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x63, 0x65, 0x44, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x64, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x69, 0x7a, 0x65,
	0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x42, 0x0a, 0x0f, 0x69, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x0e, 0x69, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x4b, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x42, 0x79, 0x41, 0x6c, 0x67, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x07, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x22, 0x5d, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xeb, 0x01, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x69, 0x67, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12,
	0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x6f,
	0x77, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x34, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x69, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x22, 0xcf, 0x01, 0x0a, 0x09, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x29, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x1a, 0x38, 0x0a,
	0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7a, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x3b, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x7e, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x66, 0x72, 0x6f, 0x6d,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0xd1, 0x0b, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x61, 0x6c, 0x67, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61,
	0x6c, 0x67, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x69,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x61, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x76, 0x61, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x71, 0x75, 0x69,
	0x74, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x65, 0x71, 0x75, 0x69, 0x74, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x6f, 0x6e,
	0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x65,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x65,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0c, 0x6c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x6e, 0x67, 0x12,
	0x26, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6c, 0x6f,
	0x6e, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x69, 0x7a, 0x65, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x6e,
	0x67, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x64, 0x5f, 0x6c,
	0x6f, 0x6e, 0x67, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x55, 0x73, 0x64, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x6f, 0x6e, 0x67, 0x12,
	0x2c, 0x0a, 0x12, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x2e, 0x0a,
	0x13, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f,
	0x6c, 0x6f, 0x6e, 0x67, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x2a, 0x0a,
	0x11, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x73, 0x64, 0x5f, 0x6c, 0x6f,
	0x6e, 0x67, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x73, 0x64, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6e, 0x6c,
	0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x70, 0x6e, 0x6c,
	0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x5f, 0x6c, 0x6f, 0x6e, 0x67,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x66, 0x65, 0x65, 0x4c, 0x6f, 0x6e, 0x67, 0x12,
	0x21, 0x0a, 0x0c, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x6f,
	0x6e, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x70, 0x6c, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x72, 0x70, 0x6c, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x30, 0x0a,
	0x14, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x6c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x0f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x64, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x18,
	0x24, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x73, 0x64, 0x53,
	0x68, 0x6f, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x12, 0x2c,
	0x0a, 0x12, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x73, 0x64, 0x5f, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x64, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x13,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x12, 0x30, 0x0a, 0x14,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x6e, 0x6c, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x70, 0x6e, 0x6c, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x65, 0x65, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x66, 0x65, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0c, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x70, 0x6c, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x72, 0x70, 0x6c, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x69, 0x6e, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x22, 0x3a, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73,
	0x32, 0xb8, 0x02, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x72, 0x74, 0x41, 0x50, 0x49, 0x12, 0x45, 0x0a,
	0x08, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x67, 0x6f, 0x73, 0x12, 0x1a, 0x2e, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x67, 0x6f, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x67, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x73, 0x42, 0x79, 0x41, 0x6c, 0x67, 0x6f, 0x12, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x42,
	0x79, 0x41, 0x6c, 0x67, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x73, 0x42, 0x79, 0x41, 0x6c, 0x67, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19,
	0x2e, 0x63, 0x68, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4c, 0x6f,
	0x67, 0x73, 0x12, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47,
	0x65, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x20, 0x5a, 0x1e, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chart_api_proto_rawDescOnce sync.Once
	file_chart_api_proto_rawDescData = file_chart_api_proto_rawDesc
)

func file_chart_api_proto_rawDescGZIP() []byte {
	file_chart_api_proto_rawDescOnce.Do(func() {
		file_chart_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_chart_api_proto_rawDescData)
	})
	return file_chart_api_proto_rawDescData
}

var file_chart_api_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_chart_api_proto_goTypes = []any{
	(*GetAlgosRequest)(nil),          // 0: chart_api.GetAlgosRequest
	(*GetAlgosResponse)(nil),         // 1: chart_api.GetAlgosResponse
	(*GetStreamsByAlgoRequest)(nil),  // 2: chart_api.GetStreamsByAlgoRequest
	(*IndicatorParam)(nil),           // 3: chart_api.IndicatorParam
	(*StreamData)(nil),               // 4: chart_api.StreamData
	(*GetStreamsByAlgoResponse)(nil), // 5: chart_api.GetStreamsByAlgoResponse
	(*GetDataRequest)(nil),           // 6: chart_api.GetDataRequest
	(*DataPoint)(nil),                // 7: chart_api.DataPoint
	(*Indicator)(nil),                // 8: chart_api.Indicator
	(*Volume)(nil),                   // 9: chart_api.Volume
	(*GetDataResponse)(nil),          // 10: chart_api.GetDataResponse
	(*GetLogsRequest)(nil),           // 11: chart_api.GetLogsRequest
	(*LogEntry)(nil),                 // 12: chart_api.LogEntry
	(*GetLogsResponse)(nil),          // 13: chart_api.GetLogsResponse
	nil,                              // 14: chart_api.IndicatorParam.ParamEntry
	nil,                              // 15: chart_api.Indicator.ParamEntry
	nil,                              // 16: chart_api.Volume.ParamsEntry
}
var file_chart_api_proto_depIdxs = []int32{
	14, // 0: chart_api.IndicatorParam.param:type_name -> chart_api.IndicatorParam.ParamEntry
	3,  // 1: chart_api.StreamData.indicator_param:type_name -> chart_api.IndicatorParam
	4,  // 2: chart_api.GetStreamsByAlgoResponse.streams:type_name -> chart_api.StreamData
	8,  // 3: chart_api.DataPoint.indicators:type_name -> chart_api.Indicator
	15, // 4: chart_api.Indicator.param:type_name -> chart_api.Indicator.ParamEntry
	9,  // 5: chart_api.Indicator.volume:type_name -> chart_api.Volume
	16, // 6: chart_api.Volume.params:type_name -> chart_api.Volume.ParamsEntry
	7,  // 7: chart_api.GetDataResponse.data:type_name -> chart_api.DataPoint
	12, // 8: chart_api.GetLogsResponse.logs:type_name -> chart_api.LogEntry
	0,  // 9: chart_api.ChartAPI.GetAlgos:input_type -> chart_api.GetAlgosRequest
	2,  // 10: chart_api.ChartAPI.GetStreamsByAlgo:input_type -> chart_api.GetStreamsByAlgoRequest
	6,  // 11: chart_api.ChartAPI.GetData:input_type -> chart_api.GetDataRequest
	11, // 12: chart_api.ChartAPI.GetLogs:input_type -> chart_api.GetLogsRequest
	1,  // 13: chart_api.ChartAPI.GetAlgos:output_type -> chart_api.GetAlgosResponse
	5,  // 14: chart_api.ChartAPI.GetStreamsByAlgo:output_type -> chart_api.GetStreamsByAlgoResponse
	10, // 15: chart_api.ChartAPI.GetData:output_type -> chart_api.GetDataResponse
	13, // 16: chart_api.ChartAPI.GetLogs:output_type -> chart_api.GetLogsResponse
	13, // [13:17] is the sub-list for method output_type
	9,  // [9:13] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_chart_api_proto_init() }
func file_chart_api_proto_init() {
	if File_chart_api_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chart_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_chart_api_proto_goTypes,
		DependencyIndexes: file_chart_api_proto_depIdxs,
		MessageInfos:      file_chart_api_proto_msgTypes,
	}.Build()
	File_chart_api_proto = out.File
	file_chart_api_proto_rawDesc = nil
	file_chart_api_proto_goTypes = nil
	file_chart_api_proto_depIdxs = nil
}
